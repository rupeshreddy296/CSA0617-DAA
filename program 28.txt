import heapq

class Node:
    def __init__(self, char, freq):
        self.char = char    # Character (leaf node)
        self.freq = freq    # Frequency of the character
        self.left = None    # Left child
        self.right = None   # Right child
    
    # Define a comparison method for the priority queue
    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(freq_dict):
    # Step 1: Build the priority queue (min-heap)
    heap = []
    
    # Create a leaf node for each character and push it into the heap
    for char, freq in freq_dict.items():
        heapq.heappush(heap, Node(char, freq))
    
    # Step 2: Build the Huffman Tree
    while len(heap) > 1:
        # Pop the two nodes with the smallest frequency
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        
        # Create a new internal node with the sum of the frequencies
        internal_node = Node(None, left.freq + right.freq)
        internal_node.left = left
        internal_node.right = right
        
        # Push the new node back into the heap
        heapq.heappush(heap, internal_node)
    
    # The remaining node is the root of the Huffman Tree
    return heap[0]

def generate_huffman_codes(root, current_code="", codes=None):
    if codes is None:
        codes = {}
    
    # If the node is a leaf node, assign the code to the character
    if root.char is not None:
        codes[root.char] = current_code
        return codes
    
    # Traverse the left and right subtrees
    if root.left:
        generate_huffman_codes(root.left, current_code + "0", codes)
    if root.right:
        generate_huffman_codes(root.right, current_code + "1", codes)
    
    return codes

def huffman_coding(char_freq):
    # Step 1: Build the Huffman Tree
    root = build_huffman_tree(char_freq)
    
    # Step 2: Generate Huffman Codes
    huffman_codes = generate_huffman_codes(root)
    
    return huffman_codes

# Example usage:
char_freq = {
    'A': 5,
    'B': 9,
    'C': 12,
    'D': 13,
    'E': 16,
    'F': 45
}

huffman_codes = huffman_coding(char_freq)

# Print the Huffman Codes for each character
print("Huffman Codes:")
for char, code in huffman_codes.items():
    print(f"{char}: {code}")
