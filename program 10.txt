# Define the number of vertices in the graph
INF = float('inf')  # Use a large value to represent infinity
N = 4  # Number of vertices

# Function to implement Floyd-Warshall algorithm
def floyd_warshall(graph):
    # Initialize the distance matrix
    dist = [[0] * N for _ in range(N)]
    
    # Copy the input graph to the distance matrix
    for i in range(N):
        for j in range(N):
            dist[i][j] = graph[i][j]
    
    # Apply the Floyd-Warshall algorithm
    for k in range(N):
        for i in range(N):
            for j in range(N):
                # If the path from i to j through k is shorter, update it
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    return dist

# Example adjacency matrix representing the graph
# INF (infinity) means no direct path between nodes
graph = [
    [0, 3, INF, INF],
    [2, 0, INF, 5],
    [INF, 7, 0, 2],
    [INF, INF, 1, 0]
]

# Call the Floyd-Warshall algorithm
result = floyd_warshall(graph)

# Print the shortest path matrix
print("The shortest path distances between every pair of vertices are:")
for row in result:
    print(row)
