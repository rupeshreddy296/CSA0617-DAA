def median_of_medians(arr):
    # Base case: if the array has 5 or fewer elements, return the median
    if len(arr) <= 5:
        return sorted(arr)[len(arr) // 2]

    # Step 1: Divide arr into groups of 5
    groups = [arr[i:i+5] for i in range(0, len(arr), 5)]

    # Step 2: Find the median of each group
    medians = [sorted(group)[len(group) // 2] for group in groups]

    # Step 3: Recursively find the median of the medians
    pivot = median_of_medians(medians)

    return pivot


def partition(arr, pivot):
    # Partition the array into two halves based on the pivot
    left = [x for x in arr if x < pivot]
    right = [x for x in arr if x > pivot]
    middle = [x for x in arr if x == pivot]
    return left, middle, right


def select_kth_smallest(arr, k):
    # If the array has only one element, return it
    if len(arr) == 1:
        return arr[0]

    # Find the pivot using the median of medians algorithm
    pivot = median_of_medians(arr)

    # Partition the array around the pivot
    left, middle, right = partition(arr, pivot)

    # Step 1: Check if pivot is the k-th smallest element
    if k < len(left):
        return select_kth_smallest(left, k)
    elif k < len(left) + len(middle):
        return pivot  # pivot is the k-th smallest
    else:
        return select_kth_smallest(right, k - len(left) - len(middle))
