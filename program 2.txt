import numpy as np

# Define a large number to represent "infinity"
INF = float('inf')

# Function to implement Floyd-Warshall Algorithm
def floyd_warshall(graph):
    # Number of routers (vertices)
    num_vertices = len(graph)
    
    # Create a copy of the graph to store the shortest distances
    dist = np.array(graph)

    # Run the Floyd-Warshall algorithm
    for k in range(num_vertices):
        for i in range(num_vertices):
            for j in range(num_vertices):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    return dist

# Function to display the shortest path from A to F (routers are indexed 0 to 5)
def get_shortest_path(dist_matrix, start, end):
    return dist_matrix[start][end]

# Example graph representation for routers A to F (0 to 5)
# The distance matrix represents direct links between routers
graph = [
    [0, 3, INF, INF, 7, INF],  # A -> [A, B, D, F]
    [3, 0, 4, 2, INF, INF],    # B -> [A, B, C, D]
    [INF, 4, 0, 5, INF, INF],  # C -> [B, C, D]
    [INF, 2, 5, 0, 3, INF],    # D -> [B, C, D, E]
    [7, INF, INF, 3, 0, 2],    # E -> [A, D, E, F]
    [INF, INF, INF, INF, 2, 0] # F -> [E, F]
]

# Display the original distance matrix
print("Original distance matrix (before failure):")
print(np.array(graph))

# Apply Floyd-Warshall algorithm
shortest_paths = floyd_warshall(graph)

# Display the shortest path from Router A to Router F before link failure
router_A_to_F_before = get_shortest_path(shortest_paths, 0, 5)
print(f"\nShortest path from Router A to Router F before the link failure: {router_A_to_F_before}")

# Simulate the failure of the link between Router B and Router D (index 1, 3)
graph[1][3] = INF
graph[3][1] = INF

# Recompute the shortest paths after the failure
shortest_paths_after_failure = floyd_warshall(graph)

# Display the updated distance matrix after link failure
print("\nDistance matrix after the link failure between Router B and Router D:")
print(np.array(graph))

# Display the shortest path from Router A to Router F after the link failure
router_A_to_F_after = get_shortest_path(shortest_paths_after_failure, 0, 5)
print(f"\nShortest path from Router A to Router F after the link failure: {router_A_to_F_after}")
