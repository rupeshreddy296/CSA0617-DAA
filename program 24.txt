import heapq

def networkDelayTime(times, n, k):
    # Step 1: Build the adjacency list representation of the graph
    graph = {i: [] for i in range(1, n + 1)}
    for u, v, w in times:
        graph[u].append((v, w))  # (neighbor, weight)
    
    # Step 2: Run Dijkstra's algorithm from node `k`
    # Initialize distances with infinity
    distances = {i: float('inf') for i in range(1, n + 1)}
    distances[k] = 0  # Starting point has a distance of 0
    
    # Min-heap priority queue, starting with the source node k
    pq = [(0, k)]  # (distance, node)
    
    while pq:
        current_dist, node = heapq.heappop(pq)
        
        # If the current node's distance is greater than the already found distance, skip
        if current_dist > distances[node]:
            continue
        
        # Explore neighbors
        for neighbor, weight in graph[node]:
            new_dist = current_dist + weight
            if new_dist < distances[neighbor]:
                distances[neighbor] = new_dist
                heapq.heappush(pq, (new_dist, neighbor))
    
    # Step 3: Find the maximum distance among all nodes
    max_distance = max(distances.values())
    
    # If any node is unreachable (distance is still infinity), return -1
    if max_distance == float('inf'):
        return -1
    
    return max_distance

# Example usage:
times = [[2, 1, 1], [2, 3, 1], [3, 4, 1]]
n = 4
k = 2
print(f"Minimum time for all nodes to receive the signal: {networkDelayTime(times, n, k)}")
