# Floyd-Warshall Algorithm to find the shortest paths between all pairs of cities

import numpy as np

# Define a large number to represent "infinity"
INF = float('inf')

# Function to implement Floyd-Warshall Algorithm
def floyd_warshall(graph):
    # Number of vertices (cities)
    num_vertices = len(graph)
    
    # Create a copy of the graph to store the shortest distances
    dist = np.array(graph)

    # Run the Floyd-Warshall algorithm
    for k in range(num_vertices):
        for i in range(num_vertices):
            for j in range(num_vertices):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    return dist

# Example graph representation using an adjacency matrix
# The cities are represented as indices: 0, 1, 2, 3, ...
# For example: graph[0][1] represents the distance from city 0 to city 1
graph = [
    [0, 3, INF, INF, 5],
    [3, 0, 1, INF, INF],
    [INF, 1, 0, 7, INF],
    [INF, INF, 7, 0, 2],
    [5, INF, INF, 2, 0]
]

# Display the original distance matrix
print("Original distance matrix:")
print(np.array(graph))

# Apply Floyd-Warshall algorithm
shortest_paths = floyd_warshall(graph)

# Display the distance matrix after applying the algorithm
print("\nDistance matrix after applying Floyd-Warshall algorithm:")
print(shortest_paths)
