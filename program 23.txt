import heapq

def findCity(n, edges, distanceThreshold):
    # Step 1: Build the graph using an adjacency list
    graph = {i: [] for i in range(n)}
    
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))
    
    # Step 2: Dijkstra's algorithm to find shortest paths from a given source city
    def dijkstra(source):
        dist = [float('inf')] * n
        dist[source] = 0
        min_heap = [(0, source)]  # (distance, node)
        
        while min_heap:
            d, node = heapq.heappop(min_heap)
            
            if d > dist[node]:
                continue
            
            for neighbor, weight in graph[node]:
                new_dist = d + weight
                if new_dist < dist[neighbor]:
                    dist[neighbor] = new_dist
                    heapq.heappush(min_heap, (new_dist, neighbor))
        
        return dist
    
    # Step 3: For each city, calculate the number of cities reachable within the distanceThreshold
    best_city = -1
    min_reachable = float('inf')
    
    for city in range(n):
        dist = dijkstra(city)
        reachable_count = sum(1 for d in dist if d <= distanceThreshold)
        
        # We want to minimize the number of reachable cities, 
        # and in case of a tie, prefer the city with the greatest index
        if reachable_count <= min_reachable:
            min_reachable = reachable_count
            best_city = city
    
    return best_city

# Example usage:
n = 4
edges = [[0, 1, 3], [1, 2, 1], [2, 3, 1], [0, 2, 2], [0, 3, 4]]
distanceThreshold = 4
print(f"The city with the smallest number of reachable cities: {findCity(n, edges, distanceThreshold)}")
