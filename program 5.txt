import numpy as np

# Function to compute Strassen's matrix multiplication
def strassen(A, B):
    # Base case: If the matrix is 2x2, perform direct multiplication
    if len(A) == 2:
        # Extract elements of A and B
        a, b = A[0, 0], A[0, 1]
        c, d = A[1, 0], A[1, 1]
        e, f = B[0, 0], B[0, 1]
        g, h = B[1, 0], B[1, 1]
        
        # Compute the 7 products (P1, P2, ..., P7)
        P1 = a * (f - h)
        P2 = (a + b) * h
        P3 = (c + d) * e
        P4 = d * (g - e)
        P5 = (a + d) * (e + h)
        P6 = (b - d) * (g + h)
        P7 = (a - c) * (e + f)

        # Compute the resulting matrix C
        C11 = P5 + P4 - P2 + P6
        C12 = P1 + P2
        C21 = P3 + P4
        C22 = P1 + P5 - P3 - P7

        # Return the result matrix C
        return np.array([[C11, C12], [C21, C22]])

# Example matrices
A = np.array([[1, 7], [3, 5]])
B = np.array([[1, 3], [7, 5]])

# Multiply matrices using Strassen's algorithm
C = strassen(A, B)

# Output the result
print("Matrix A:")
print(A)
print("\nMatrix B:")
print(B)
print("\nProduct Matrix C (A x B) using Strassen's Algorithm:")
print(C)
