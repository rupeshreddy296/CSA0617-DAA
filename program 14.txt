def wordBreak(s: str, wordDict: list) -> bool:
    # Create a set from wordDict for O(1) lookups
    word_set = set(wordDict)
    
    # Initialize DP array: dp[i] means whether s[0:i] can be segmented
    dp = [False] * (len(s) + 1)
    
    # Base case: Empty string is always considered as segmented
    dp[0] = True
    
    # Iterate through each position in the string
    for i in range(1, len(s) + 1):
        # Check all possible substring ending at position i
        for j in range(i):
            # If s[j:i] is in wordDict and s[0:j] can be segmented
            if dp[j] and s[j:i] in word_set:
                dp[i] = True
                break
    
    # The result is whether the whole string s[0:len(s)] can be segmented
    return dp[len(s)]

# Example usage:
s = "leetcode"
wordDict = ["leet", "code"]
print(wordBreak(s, wordDict))  # Output: True

s = "applepenapple"
wordDict = ["apple", "pen"]
print(wordBreak(s, wordDict))  # Output: True

s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
print(wordBreak(s, wordDict))  # Output: False
